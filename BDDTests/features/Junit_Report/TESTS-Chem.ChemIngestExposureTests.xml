<testsuite errors="0" failures="0" name="Chem.ChemIngestExposureTests.As a Chem User, I want to check structure of tables and its content in the Chem schema so I can use it confindentaly" skipped="3" tests="4" time="2.420138"><testcase classname="Chem.ChemIngestExposureTests.As a Chem User, I want to check structure of tables and its content in the Chem schema so I can use it confindentaly" name="Check the Chem Tables Count are Identical between Ingest Exposure" status="skipped" time="0"><skipped /><system-out>
<![CDATA[
@scenario.begin

  @chemTableCount
  Scenario: Check the Chem Tables Count are Identical between Ingest Exposure
    Given I set up the database connections for "Ingest" on "CCDEV" environment ... skipped in 0.000s
    And I set up the database connections for "Exposure" on "CCDEV" environment ... skipped in 0.000s
    When I execute following query for "source" Schema ... skipped in 0.000s
      """
      SELECT Count(table_name) as TableCount FROM information_schema.tables where table_schema='chem_proc_ingest'
      and table_name NOT LIKE '%log%'
      """
    When I execute following query for "target" Schema ... skipped in 0.000s
      """
      SELECT Count(table_name) as TableCount FROM information_schema.tables where table_schema='chem'
      AND table_name NOT LIKE '%view%'
      """
    Then I should get the difference from "Source" to "Target" in "Chem_Ingest_Exposure_TableCount" csv file ... skipped in 0.000s
    And I should get the difference from "Target" to "Source" in "Chem_Exposure_Ingest_TableCount" csv file ... skipped in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="Chem.ChemIngestExposureTests.As a Chem User, I want to check structure of tables and its content in the Chem schema so I can use it confindentaly" name="Check the Chem Tables Names List are Identical between Ingest Exposure" status="skipped" time="0"><skipped /><system-out>
<![CDATA[
@scenario.begin

  @chemTableNames
  Scenario: Check the Chem Tables Names List are Identical between Ingest Exposure
    Given I set up the database connections for "Ingest" on "CCDEV" environment ... skipped in 0.000s
    And I set up the database connections for "Exposure" on "CCDEV" environment ... skipped in 0.000s
    When I execute following query for "source" Schema ... skipped in 0.000s
      """
      SELECT table_name as TableName from information_schema.tables where table_schema='chem_proc_ingest'
      AND table_name NOT LIKE '%log%'
      """
    When I execute following query for "target" Schema ... skipped in 0.000s
      """
      SELECT table_name as TableName FROM information_schema.tables where table_schema='chem'
      AND table_name NOT LIKE '%view%'
      """
    Then I should get the difference from "Source" to "Target" in "Chem_Ingest_Exposure_TableCount" csv file ... skipped in 0.000s
    And I should get the difference from "Target" to "Source" in "Chem_Exposure_Ingest_TableCount" csv file ... skipped in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="Chem.ChemIngestExposureTests.As a Chem User, I want to check structure of tables and its content in the Chem schema so I can use it confindentaly" name="Check the Chem Column Counts are Identical between Ingest Exposure" status="skipped" time="0"><skipped /><system-out>
<![CDATA[
@scenario.begin

  @chemColumnsCount
  Scenario: Check the Chem Column Counts are Identical between Ingest Exposure
    Given I set up the database connections for "Ingest" on "CCDEV" environment ... skipped in 0.000s
    And I set up the database connections for "Exposure" on "CCDEV" environment ... skipped in 0.000s
    When I execute following query for "source" Schema ... skipped in 0.000s
      """
      Select table_name,Count(*) ColumnCount from information_schema.columns where table_schema='chem_proc_ingest' AND table_name NOT LIKE '%log%'
      GROUP BY table_name Order by table_name
      """
    When I execute following query for "target" Schema ... skipped in 0.000s
      """
      Select table_name,Count(*) ColumnCount  from information_schema.columns where table_schema='chem' AND table_name NOT LIKE '%view%'
      and column_name NOT LIKE 'acn' GROUP BY table_name Order By table_name
      """
    Then I should get the difference from "Source" to "Target" in "Chem_Ingest_Exposure_ColCount" csv file ... skipped in 0.000s
    And I should get the difference from "Target" to "Source" in "Chem_Exposure_Ingest_ColCount" csv file ... skipped in 0.000s

@scenario.end
--------------------------------------------------------------------------------
]]>
</system-out></testcase><testcase classname="Chem.ChemIngestExposureTests.As a Chem User, I want to check structure of tables and its content in the Chem schema so I can use it confindentaly" name="Check the List of Column Names in all tables are Identical between Ingest Exposure" status="passed" time="2.420138"><system-out>
<![CDATA[
@scenario.begin

  @chemColumnsNames
  Scenario: Check the List of Column Names in all tables are Identical between Ingest Exposure
    Given I set up the database connections for "Ingest" on "CCDEV" environment ... passed in 0.992s
    And I set up the database connections for "Exposure" on "CCDEV" environment ... passed in 0.581s
    When I execute following query for "source" Schema ... passed in 0.398s
      """
      Select table_name TableName, column_name as ColumnName from information_schema.columns where table_schema='chem_proc_ingest' AND table_name NOT LIKE '%log%'
      Order By TableName,ColumnName
      """
    When I execute following query for "target" Schema ... passed in 0.394s
      """
      Select table_name TableName, column_name as ColumnName from information_schema.columns where table_schema='chem' AND table_name NOT LIKE '%view%'
      and column_name NOT LIKE 'acn' Order By TableName,ColumnName
      """
    Then I should get the difference from "Source" to "Target" in "Chem_Ingest_Exposure_ColCount" csv file ... passed in 0.029s
    And I should get the difference from "Target" to "Source" in "Chem_Exposure_Ingest_ColNames" csv file ... passed in 0.026s

@scenario.end
--------------------------------------------------------------------------------

Captured stdout:
In Start of Setup <<--===COUNNECTION COUNT.... : 0
<<<<<<<CCDEV Environment excuted..>>>>>>>>!!
dbEnv : CCDEV  -- schema : Ingest
++++++++++++++++++Connected to DB..!+++++++++++++++++
COUNNECTION COUNT.... : 1
In Start of Setup <<--===COUNNECTION COUNT.... : 1
<<<<<<<CCDEV Environment excuted..>>>>>>>>!!
dbEnv : CCDEV  -- schema : Exposure
++++++++++++++++++Connected to DB..!+++++++++++++++++
COUNNECTION COUNT.... : 2
ColNames1 : ['tablename', 'columnname']
context.diffSourceToTarget ===>  [['tablename', 'columnname']]
Query : Select table_name TableName, column_name as ColumnName from information_schema.columns where table_schema='chem_proc_ingest' AND table_name NOT LIKE '%log%'
Order By TableName,ColumnName
Schema Name : source
<<---------------End of I execute following query...------------------------->>
ColNames2 : ['tablename', 'columnname']
context.diffTargetToSource ===>  [['tablename', 'columnname']]
Query : Select table_name TableName, column_name as ColumnName from information_schema.columns where table_schema='chem' AND table_name NOT LIKE '%view%'
and column_name NOT LIKE 'acn' Order By TableName,ColumnName
Schema Name : target
<<---------------End of I execute following query...------------------------->>
In Last Step ---- context.diffSourceToTarget ===>  [['tablename', 'columnname']]
In Last Step ---- context.diffTargetToSource ===>  [['tablename', 'columnname']]
diffSchema1 ------------->>>>>>>> Source
diffSchema2 ------------->>>>>>>> Target
context.listSource : [('ch_calc_properties_cax', 'aromatic_rings'), ('ch_calc_properties_cax', 'fragments'), ('ch_calc_properties_cax', 'hba_lipinski'), ('ch_calc_properties_cax', 'hbd_lipinski'), ('ch_calc_properties_cax', 'hbond_acceptors'), ('ch_calc_properties_cax', 'hbond_donors'), ('ch_calc_properties_cax', 'lipinski'), ('ch_calc_properties_cax', 'logp'), ('ch_calc_properties_cax', 'mw'), ('ch_calc_properties_cax', 'pka'), ('ch_calc_properties_cax', 'pkb'), ('ch_calc_properties_cax', 'prop_date'), ('ch_calc_properties_cax', 'rotatable_bonds'), ('ch_calc_properties_cax', 'structure_id'), ('ch_calc_properties_cax', 'tpsa'), ('ch_dcr_structure', 'added_date'), ('ch_dcr_structure', 'dcr_number'), ('ch_dcr_structure', 'structure_id'), ('ch_dcr_structure', 'update_date'), ('ch_ddr_activity', 'activity'), ('ch_ddr_activity', 'ddf_rn'), ('ch_ddr_clean', 'added_date'), ('ch_ddr_clean', 'chemistry'), ('ch_ddr_clean', 'cln_molfile'), ('ch_ddr_clean', 'cln_proc_date'), ('ch_ddr_clean', 'cln_proc_details'), ('ch_ddr_clean', 'cln_proc_version'), ('ch_ddr_clean', 'dbload_date'), ('ch_ddr_clean', 'ddf_pref_name'), ('ch_ddr_clean', 'ddf_rn'), ('ch_ddr_clean', 'is_chiral'), ('ch_ddr_clean', 'is_nostructure'), ('ch_ddr_clean', 'is_v3000'), ('ch_ddr_clean', 'orig_molfile'), ('ch_ddr_clean', 'str_proc_date'), ('ch_ddr_clean', 'update_date'), ('ch_ddr_dcr', 'dcr_number'), ('ch_ddr_dcr', 'ddf_rn'), ('ch_ddr_history', 'action'), ('ch_ddr_history', 'action_date'), ('ch_ddr_history', 'ddf_rn'), ('ch_ddr_name', 'check_name'), ('ch_ddr_name', 'ddf_rn'), ('ch_ddr_name', 'name'), ('ch_ddr_name', 'name_type'), ('ch_ddr_structure', 'added_date'), ('ch_ddr_structure', 'ddf_rn'), ('ch_ddr_structure', 'structure_id'), ('ch_ddr_structure', 'update_date'), ('ch_int_structure', 'added_date'), ('ch_int_structure', 'entry_number'), ('ch_int_structure', 'structure_id'), ('ch_int_structure', 'update_date'), ('ch_jph_clean', 'added_date'), ('ch_jph_clean', 'cln_molfile'), ('ch_jph_clean', 'cln_proc_date'), ('ch_jph_clean', 'cln_proc_details'), ('ch_jph_clean', 'cln_proc_version'), ('ch_jph_clean', 'compound_id'), ('ch_jph_clean', 'dbload_date'), ('ch_jph_clean', 'is_chiral'), ('ch_jph_clean', 'is_drug'), ('ch_jph_clean', 'is_meeting'), ('ch_jph_clean', 'is_nostructure'), ('ch_jph_clean', 'is_patent'), ('ch_jph_clean', 'is_v3000'), ('ch_jph_clean', 'orig_molfile'), ('ch_jph_clean', 'str_proc_date'), ('ch_jph_clean', 'structure_added_date'), ('ch_jph_clean', 'structure_update_date'), ('ch_jph_clean', 'update_date'), ('ch_jph_dummy_compound', 'compound_id'), ('ch_jph_dummy_compound', 'update_date'), ('ch_jph_history', 'action'), ('ch_jph_history', 'action_date'), ('ch_jph_history', 'compound_id'), ('ch_jph_structure', 'added_date'), ('ch_jph_structure', 'compound_id'), ('ch_jph_structure', 'structure_id'), ('ch_jph_structure', 'update_date'), ('ch_mtb_structure', 'added_date'), ('ch_mtb_structure', 'structure_id'), ('ch_mtb_structure', 'unit_id'), ('ch_mtb_structure', 'update_date'), ('ch_relationship', 'notes'), ('ch_relationship', 'rel'), ('ch_relationship', 'relationship_id'), ('ch_relationship', 'relation_type_id'), ('ch_relationship', 'structure_id1'), ('ch_relationship', 'structure_id2'), ('ch_relationship', 'valid'), ('ch_relationship_record', 'last_structure_id'), ('ch_relationship_record', 'rec_date'), ('ch_relationship_record', 'rec_id'), ('ch_relationship_type', 'relation_id'), ('ch_relationship_type', 'relationship_active'), ('ch_relationship_type', 'relationship_name'), ('ch_relationship_type', 'relationship_notes'), ('ch_source_type', 'source_type'), ('ch_source_type', 'source_type_id'), ('ch_structure', 'added_date'), ('ch_structure', 'chime'), ('ch_structure', 'count_fragments'), ('ch_structure', 'display_image'), ('ch_structure', 'image_error'), ('ch_structure', 'img_proc_date'), ('ch_structure', 'inchi'), ('ch_structure', 'inchikey'), ('ch_structure', 'is_chiral'), ('ch_structure', 'is_combination'), ('ch_structure', 'is_v3000'), ('ch_structure', 'molfile'), ('ch_structure', 'mol_formula'), ('ch_structure', 'mol_weight'), ('ch_structure', 'rel_proc_date'), ('ch_structure', 'smiles'), ('ch_structure', 'source_priority'), ('ch_structure', 'structure_id'), ('ch_structure', 'systematic_name'), ('ch_structure', 'thumbnail_image'), ('ch_structure', 'update_date'), ('ch_structure_deleted', 'deleted_date'), ('ch_structure_deleted', 'structure_id'), ('ch_substance', 'added_date'), ('ch_substance', 'is_nostructure'), ('ch_substance', 'substance_id'), ('ch_substance', 'update_date'), ('ch_substance_deleted', 'deleted_date'), ('ch_substance_deleted', 'substance_id'), ('ch_substance_source', 'added_date'), ('ch_substance_source', 'source_id'), ('ch_substance_source', 'source_type_id'), ('ch_substance_source', 'structure_added'), ('ch_substance_source', 'structure_updated'), ('ch_substance_source', 'substance_id'), ('ch_substance_source', 'update_date'), ('ch_substance_structure', 'added_date'), ('ch_substance_structure', 'structure_id'), ('ch_substance_structure', 'substance_id'), ('ch_substance_structure', 'update_date'), ('ch_utility_molecule', 'molecule_name'), ('ch_utility_molecule', 'molecule_valid'), ('ch_utility_molecule', 'molfile'), ('ch_utility_molecule', 'notes'), ('ch_utility_molecule', 'util_molecule_id'), ('ch_wpi_clean', 'added_date'), ('ch_wpi_clean', 'chemistry'), ('ch_wpi_clean', 'dbload_date'), ('ch_wpi_clean', 'dcr_number'), ('ch_wpi_clean', 'is_chiral'), ('ch_wpi_clean', 'is_nostructure'), ('ch_wpi_clean', 'is_v3000'), ('ch_wpi_clean', 'molfile'), ('ch_wpi_clean', 'pref_name'), ('ch_wpi_clean', 'str_proc_date'), ('ch_wpi_clean', 'update_date'), ('ch_wpi_history', 'action'), ('ch_wpi_history', 'action_date'), ('ch_wpi_history', 'dcr_number'), ('ch_wpi_name', 'check_name'), ('ch_wpi_name', 'dcr_number'), ('ch_wpi_name', 'name'), ('ch_wpi_name', 'name_type'), ('ch_wpi_structure', 'added_date'), ('ch_wpi_structure', 'dcr_number'), ('ch_wpi_structure', 'structure_id'), ('ch_wpi_structure', 'update_date'), ('int_clean', 'added_date'), ('int_clean', 'cln_molfile'), ('int_clean', 'cln_proc_date'), ('int_clean', 'cln_proc_details'), ('int_clean', 'cln_proc_version'), ('int_clean', 'dbload_date'), ('int_clean', 'entry_number'), ('int_clean', 'is_chiral'), ('int_clean', 'is_nostructure'), ('int_clean', 'is_v3000'), ('int_clean', 'orig_molfile'), ('int_clean', 'str_proc_date'), ('int_clean', 'structure_added_date'), ('int_clean', 'structure_update_date'), ('int_clean', 'update_date'), ('int_history', 'action'), ('int_history', 'action_date'), ('int_history', 'action_description'), ('int_history', 'entry_number'), ('int_history', 'molfile_after'), ('int_history', 'molfile_before'), ('mtb_clean', 'added_date'), ('mtb_clean', 'cln_molfile'), ('mtb_clean', 'cln_proc_date'), ('mtb_clean', 'cln_proc_details'), ('mtb_clean', 'cln_proc_version'), ('mtb_clean', 'dbload_date'), ('mtb_clean', 'is_chiral'), ('mtb_clean', 'is_nostructure'), ('mtb_clean', 'is_v3000'), ('mtb_clean', 'orig_molfile'), ('mtb_clean', 'str_proc_date'), ('mtb_clean', 'structure_added_date'), ('mtb_clean', 'structure_update_date'), ('mtb_clean', 'unit_id'), ('mtb_clean', 'update_date'), ('mtb_history', 'action'), ('mtb_history', 'action_date'), ('mtb_history', 'action_description'), ('mtb_history', 'molfile_after'), ('mtb_history', 'molfile_before'), ('mtb_history', 'unit_id'), ('source_dcr', 'adverse_effect'), ('source_dcr', 'approved_name'), ('source_dcr', 'autocpi_structure'), ('source_dcr', 'chemistry'), ('source_dcr', 'compound_owner'), ('source_dcr', 'contraindication'), ('source_dcr', 'cross_ref'), ('source_dcr', 'dbload_date'), ('source_dcr', 'dcpf_pref_rn'), ('source_dcr', 'dcr_number'), ('source_dcr', 'ddf_activity'), ('source_dcr', 'ddf_mechanism'), ('source_dcr', 'ddf_rc'), ('source_dcr', 'ddf_rnextreg'), ('source_dcr', 'ddf_ss'), ('source_dcr', 'descriptor'), ('source_dcr', 'dye_activity'), ('source_dcr', 'editor_note'), ('source_dcr', 'ext_dcr_number'), ('source_dcr', 'flags'), ('source_dcr', 'frag_code'), ('source_dcr', 'id'), ('source_dcr', 'indication'), ('source_dcr', 'interaction'), ('source_dcr', 'is_ddf'), ('source_dcr', 'is_nostructure'), ('source_dcr', 'isosmiles'), ('source_dcr', 'is_wpi'), ('source_dcr', 'jsm_structure'), ('source_dcr', 'manual_code'), ('source_dcr', 'mechanism'), ('source_dcr', 'mf_ext'), ('source_dcr', 'mf_int'), ('source_dcr', 'misspelling'), ('source_dcr', 'molfile'), ('source_dcr', 'mw'), ('source_dcr', 'other_name'), ('source_dcr', 'pest_activity'), ('source_dcr', 'precaution'), ('source_dcr', 'pref_name'), ('source_dcr', 'product_details'), ('source_dcr', 'reference'), ('source_dcr', 'rin'), ('source_dcr', 'smf'), ('source_dcr', 'smiles'), ('source_dcr', 'systematic_name'), ('source_dcr', 'trade_name'), ('source_dcr', 'update_details'), ('source_dcr_deleted', 'dcr_number'), ('source_dcr_deleted', 'deleted_date'), ('source_dcr_history', 'action'), ('source_dcr_history', 'action_date'), ('source_dcr_history', 'dcr_number'), ('source_dcr_history', 'details'), ('source_dcr_id', 'comments'), ('source_dcr_id', 'dcr_number'), ('source_dcr_id', 'id_type'), ('source_dcr_id', 'id_value'), ('source_dcr_keyword', 'dcr_number'), ('source_dcr_keyword', 'keyword'), ('source_dcr_keyword', 'keyword_type'), ('source_dcr_molfile', 'added_date'), ('source_dcr_molfile', 'cln_molfile'), ('source_dcr_molfile', 'cln_proc_date'), ('source_dcr_molfile', 'cln_proc_details'), ('source_dcr_molfile', 'cln_proc_version'), ('source_dcr_molfile', 'dbload_date'), ('source_dcr_molfile', 'dcr_number'), ('source_dcr_molfile', 'frag_date'), ('source_dcr_molfile', 'frag_error'), ('source_dcr_molfile', 'frag_molfile'), ('source_dcr_molfile', 'is_chiral'), ('source_dcr_molfile', 'is_nostructure'), ('source_dcr_molfile', 'is_v3000'), ('source_dcr_molfile', 'orig_molfile'), ('source_dcr_molfile', 'smf_output'), ('source_dcr_molfile', 'str_proc_date'), ('source_dcr_molfile', 'update_date'), ('source_dcr_name', 'all_sort'), ('source_dcr_name', 'all_type'), ('source_dcr_name', 'check_name'), ('source_dcr_name', 'dcr_number'), ('source_dcr_name', 'dcr_type'), ('source_dcr_name', 'name'), ('source_dcr_name', 'name_case'), ('source_dcr_proddet', 'added_date'), ('source_dcr_proddet', 'dcr_number'), ('source_dcr_proddet', 'product_code'), ('source_dcr_proddet', 'product_id'), ('source_dcr_proddet', 'update_date')]
~~~~~~~Length of DiffSourceToTarget--~~~~~~----> diffSourceToTarget :  1
-------------------In CSV------------ diffList: [['tablename', 'columnname']]
-------------------End of CSV------------ diffList:
In Last Step ---- context.diffSourceToTarget ===>  [['tablename', 'columnname']]
In Last Step ---- context.diffTargetToSource ===>  [['tablename', 'columnname']]
diffSchema1 ------------->>>>>>>> Target
diffSchema2 ------------->>>>>>>> Source
context.listTarget : [('ch_calc_properties_cax', 'aromatic_rings'), ('ch_calc_properties_cax', 'fragments'), ('ch_calc_properties_cax', 'hba_lipinski'), ('ch_calc_properties_cax', 'hbd_lipinski'), ('ch_calc_properties_cax', 'hbond_acceptors'), ('ch_calc_properties_cax', 'hbond_donors'), ('ch_calc_properties_cax', 'lipinski'), ('ch_calc_properties_cax', 'logp'), ('ch_calc_properties_cax', 'mw'), ('ch_calc_properties_cax', 'pka'), ('ch_calc_properties_cax', 'pkb'), ('ch_calc_properties_cax', 'prop_date'), ('ch_calc_properties_cax', 'rotatable_bonds'), ('ch_calc_properties_cax', 'structure_id'), ('ch_calc_properties_cax', 'tpsa'), ('ch_dcr_structure', 'added_date'), ('ch_dcr_structure', 'dcr_number'), ('ch_dcr_structure', 'structure_id'), ('ch_dcr_structure', 'update_date'), ('ch_ddr_activity', 'activity'), ('ch_ddr_activity', 'ddf_rn'), ('ch_ddr_clean', 'added_date'), ('ch_ddr_clean', 'chemistry'), ('ch_ddr_clean', 'cln_molfile'), ('ch_ddr_clean', 'cln_proc_date'), ('ch_ddr_clean', 'cln_proc_details'), ('ch_ddr_clean', 'cln_proc_version'), ('ch_ddr_clean', 'dbload_date'), ('ch_ddr_clean', 'ddf_pref_name'), ('ch_ddr_clean', 'ddf_rn'), ('ch_ddr_clean', 'is_chiral'), ('ch_ddr_clean', 'is_nostructure'), ('ch_ddr_clean', 'is_v3000'), ('ch_ddr_clean', 'orig_molfile'), ('ch_ddr_clean', 'str_proc_date'), ('ch_ddr_clean', 'update_date'), ('ch_ddr_dcr', 'dcr_number'), ('ch_ddr_dcr', 'ddf_rn'), ('ch_ddr_history', 'action'), ('ch_ddr_history', 'action_date'), ('ch_ddr_history', 'ddf_rn'), ('ch_ddr_name', 'check_name'), ('ch_ddr_name', 'ddf_rn'), ('ch_ddr_name', 'name'), ('ch_ddr_name', 'name_type'), ('ch_ddr_structure', 'added_date'), ('ch_ddr_structure', 'ddf_rn'), ('ch_ddr_structure', 'structure_id'), ('ch_ddr_structure', 'update_date'), ('ch_int_structure', 'added_date'), ('ch_int_structure', 'entry_number'), ('ch_int_structure', 'structure_id'), ('ch_int_structure', 'update_date'), ('ch_jph_clean', 'added_date'), ('ch_jph_clean', 'cln_molfile'), ('ch_jph_clean', 'cln_proc_date'), ('ch_jph_clean', 'cln_proc_details'), ('ch_jph_clean', 'cln_proc_version'), ('ch_jph_clean', 'compound_id'), ('ch_jph_clean', 'dbload_date'), ('ch_jph_clean', 'is_chiral'), ('ch_jph_clean', 'is_drug'), ('ch_jph_clean', 'is_meeting'), ('ch_jph_clean', 'is_nostructure'), ('ch_jph_clean', 'is_patent'), ('ch_jph_clean', 'is_v3000'), ('ch_jph_clean', 'orig_molfile'), ('ch_jph_clean', 'str_proc_date'), ('ch_jph_clean', 'structure_added_date'), ('ch_jph_clean', 'structure_update_date'), ('ch_jph_clean', 'update_date'), ('ch_jph_dummy_compound', 'compound_id'), ('ch_jph_dummy_compound', 'update_date'), ('ch_jph_history', 'action'), ('ch_jph_history', 'action_date'), ('ch_jph_history', 'compound_id'), ('ch_jph_structure', 'added_date'), ('ch_jph_structure', 'compound_id'), ('ch_jph_structure', 'structure_id'), ('ch_jph_structure', 'update_date'), ('ch_mtb_structure', 'added_date'), ('ch_mtb_structure', 'structure_id'), ('ch_mtb_structure', 'unit_id'), ('ch_mtb_structure', 'update_date'), ('ch_relationship', 'notes'), ('ch_relationship', 'rel'), ('ch_relationship', 'relationship_id'), ('ch_relationship', 'relation_type_id'), ('ch_relationship', 'structure_id1'), ('ch_relationship', 'structure_id2'), ('ch_relationship', 'valid'), ('ch_relationship_record', 'last_structure_id'), ('ch_relationship_record', 'rec_date'), ('ch_relationship_record', 'rec_id'), ('ch_relationship_type', 'relation_id'), ('ch_relationship_type', 'relationship_active'), ('ch_relationship_type', 'relationship_name'), ('ch_relationship_type', 'relationship_notes'), ('ch_source_type', 'source_type'), ('ch_source_type', 'source_type_id'), ('ch_structure', 'added_date'), ('ch_structure', 'chime'), ('ch_structure', 'count_fragments'), ('ch_structure', 'display_image'), ('ch_structure', 'image_error'), ('ch_structure', 'img_proc_date'), ('ch_structure', 'inchi'), ('ch_structure', 'inchikey'), ('ch_structure', 'is_chiral'), ('ch_structure', 'is_combination'), ('ch_structure', 'is_v3000'), ('ch_structure', 'molfile'), ('ch_structure', 'mol_formula'), ('ch_structure', 'mol_weight'), ('ch_structure', 'rel_proc_date'), ('ch_structure', 'smiles'), ('ch_structure', 'source_priority'), ('ch_structure', 'structure_id'), ('ch_structure', 'systematic_name'), ('ch_structure', 'thumbnail_image'), ('ch_structure', 'update_date'), ('ch_structure_deleted', 'deleted_date'), ('ch_structure_deleted', 'structure_id'), ('ch_substance', 'added_date'), ('ch_substance', 'is_nostructure'), ('ch_substance', 'substance_id'), ('ch_substance', 'update_date'), ('ch_substance_deleted', 'deleted_date'), ('ch_substance_deleted', 'substance_id'), ('ch_substance_source', 'added_date'), ('ch_substance_source', 'source_id'), ('ch_substance_source', 'source_type_id'), ('ch_substance_source', 'structure_added'), ('ch_substance_source', 'structure_updated'), ('ch_substance_source', 'substance_id'), ('ch_substance_source', 'update_date'), ('ch_substance_structure', 'added_date'), ('ch_substance_structure', 'structure_id'), ('ch_substance_structure', 'substance_id'), ('ch_substance_structure', 'update_date'), ('ch_utility_molecule', 'molecule_name'), ('ch_utility_molecule', 'molecule_valid'), ('ch_utility_molecule', 'molfile'), ('ch_utility_molecule', 'notes'), ('ch_utility_molecule', 'util_molecule_id'), ('ch_wpi_clean', 'added_date'), ('ch_wpi_clean', 'chemistry'), ('ch_wpi_clean', 'dbload_date'), ('ch_wpi_clean', 'dcr_number'), ('ch_wpi_clean', 'is_chiral'), ('ch_wpi_clean', 'is_nostructure'), ('ch_wpi_clean', 'is_v3000'), ('ch_wpi_clean', 'molfile'), ('ch_wpi_clean', 'pref_name'), ('ch_wpi_clean', 'str_proc_date'), ('ch_wpi_clean', 'update_date'), ('ch_wpi_history', 'action'), ('ch_wpi_history', 'action_date'), ('ch_wpi_history', 'dcr_number'), ('ch_wpi_name', 'check_name'), ('ch_wpi_name', 'dcr_number'), ('ch_wpi_name', 'name'), ('ch_wpi_name', 'name_type'), ('ch_wpi_structure', 'added_date'), ('ch_wpi_structure', 'dcr_number'), ('ch_wpi_structure', 'structure_id'), ('ch_wpi_structure', 'update_date'), ('int_clean', 'added_date'), ('int_clean', 'cln_molfile'), ('int_clean', 'cln_proc_date'), ('int_clean', 'cln_proc_details'), ('int_clean', 'cln_proc_version'), ('int_clean', 'dbload_date'), ('int_clean', 'entry_number'), ('int_clean', 'is_chiral'), ('int_clean', 'is_nostructure'), ('int_clean', 'is_v3000'), ('int_clean', 'orig_molfile'), ('int_clean', 'str_proc_date'), ('int_clean', 'structure_added_date'), ('int_clean', 'structure_update_date'), ('int_clean', 'update_date'), ('int_history', 'action'), ('int_history', 'action_date'), ('int_history', 'action_description'), ('int_history', 'entry_number'), ('int_history', 'molfile_after'), ('int_history', 'molfile_before'), ('mtb_clean', 'added_date'), ('mtb_clean', 'cln_molfile'), ('mtb_clean', 'cln_proc_date'), ('mtb_clean', 'cln_proc_details'), ('mtb_clean', 'cln_proc_version'), ('mtb_clean', 'dbload_date'), ('mtb_clean', 'is_chiral'), ('mtb_clean', 'is_nostructure'), ('mtb_clean', 'is_v3000'), ('mtb_clean', 'orig_molfile'), ('mtb_clean', 'str_proc_date'), ('mtb_clean', 'structure_added_date'), ('mtb_clean', 'structure_update_date'), ('mtb_clean', 'unit_id'), ('mtb_clean', 'update_date'), ('mtb_history', 'action'), ('mtb_history', 'action_date'), ('mtb_history', 'action_description'), ('mtb_history', 'molfile_after'), ('mtb_history', 'molfile_before'), ('mtb_history', 'unit_id'), ('source_dcr', 'adverse_effect'), ('source_dcr', 'approved_name'), ('source_dcr', 'autocpi_structure'), ('source_dcr', 'chemistry'), ('source_dcr', 'compound_owner'), ('source_dcr', 'contraindication'), ('source_dcr', 'cross_ref'), ('source_dcr', 'dbload_date'), ('source_dcr', 'dcpf_pref_rn'), ('source_dcr', 'dcr_number'), ('source_dcr', 'ddf_activity'), ('source_dcr', 'ddf_mechanism'), ('source_dcr', 'ddf_rc'), ('source_dcr', 'ddf_rnextreg'), ('source_dcr', 'ddf_ss'), ('source_dcr', 'descriptor'), ('source_dcr', 'dye_activity'), ('source_dcr', 'editor_note'), ('source_dcr', 'ext_dcr_number'), ('source_dcr', 'flags'), ('source_dcr', 'frag_code'), ('source_dcr', 'id'), ('source_dcr', 'indication'), ('source_dcr', 'interaction'), ('source_dcr', 'is_ddf'), ('source_dcr', 'is_nostructure'), ('source_dcr', 'isosmiles'), ('source_dcr', 'is_wpi'), ('source_dcr', 'jsm_structure'), ('source_dcr', 'manual_code'), ('source_dcr', 'mechanism'), ('source_dcr', 'mf_ext'), ('source_dcr', 'mf_int'), ('source_dcr', 'misspelling'), ('source_dcr', 'molfile'), ('source_dcr', 'mw'), ('source_dcr', 'other_name'), ('source_dcr', 'pest_activity'), ('source_dcr', 'precaution'), ('source_dcr', 'pref_name'), ('source_dcr', 'product_details'), ('source_dcr', 'reference'), ('source_dcr', 'rin'), ('source_dcr', 'smf'), ('source_dcr', 'smiles'), ('source_dcr', 'systematic_name'), ('source_dcr', 'trade_name'), ('source_dcr', 'update_details'), ('source_dcr_deleted', 'dcr_number'), ('source_dcr_deleted', 'deleted_date'), ('source_dcr_history', 'action'), ('source_dcr_history', 'action_date'), ('source_dcr_history', 'dcr_number'), ('source_dcr_history', 'details'), ('source_dcr_id', 'comments'), ('source_dcr_id', 'dcr_number'), ('source_dcr_id', 'id_type'), ('source_dcr_id', 'id_value'), ('source_dcr_keyword', 'dcr_number'), ('source_dcr_keyword', 'keyword'), ('source_dcr_keyword', 'keyword_type'), ('source_dcr_molfile', 'added_date'), ('source_dcr_molfile', 'cln_molfile'), ('source_dcr_molfile', 'cln_proc_date'), ('source_dcr_molfile', 'cln_proc_details'), ('source_dcr_molfile', 'cln_proc_version'), ('source_dcr_molfile', 'dbload_date'), ('source_dcr_molfile', 'dcr_number'), ('source_dcr_molfile', 'frag_date'), ('source_dcr_molfile', 'frag_error'), ('source_dcr_molfile', 'frag_molfile'), ('source_dcr_molfile', 'is_chiral'), ('source_dcr_molfile', 'is_nostructure'), ('source_dcr_molfile', 'is_v3000'), ('source_dcr_molfile', 'orig_molfile'), ('source_dcr_molfile', 'smf_output'), ('source_dcr_molfile', 'str_proc_date'), ('source_dcr_molfile', 'update_date'), ('source_dcr_name', 'all_sort'), ('source_dcr_name', 'all_type'), ('source_dcr_name', 'check_name'), ('source_dcr_name', 'dcr_number'), ('source_dcr_name', 'dcr_type'), ('source_dcr_name', 'name'), ('source_dcr_name', 'name_case'), ('source_dcr_proddet', 'added_date'), ('source_dcr_proddet', 'dcr_number'), ('source_dcr_proddet', 'product_code'), ('source_dcr_proddet', 'product_id'), ('source_dcr_proddet', 'update_date')]
~~~~~~~Length of diffTargetToSource--~~~~~~----> diffTargetToSource :  [['tablename', 'columnname']]
-------------------In CSV------------ diffList: [['tablename', 'columnname']]
-------------------End of CSV------------ diffList:

]]>
</system-out></testcase></testsuite>